/*
 * Error type:
 * 1. missing closing symbol, eg. parenthese, quotation, etc.
 * 2. missing comma or semicolon
 *
 * (remark: '$' stands for empty terminal)
 */

/* HIGH-LEVEL DEFINITION specifies the top-level syntax for a SPL program, including global variable declarations and function definitions.*/
Program -> ExtDefList
ExtDefList -> ExtDef ExtDefList
    | $
ExtDef -> Specifier ExtDecList SEMI
    | Specifier SEMI
    | Specifier FunDec CompSt
ExtDecList -> VarDec
    | VarDec COMMA ExtDecList

/* SPECIFIER is related to the type system, in SPL, we have primitive types (int, float and char) and structure type. */
Specifier -> TYPE  /* int */
    | StructSpecifier
StructSpecifier ->
    STRUCT ID LC DefList RC
/* struct Observer {
 *     int a;
 *     char c;
 * }
 */
    | STRUCT ID  /* struct Observer */

/* DECLARATOR defines the variable and function declaration.
 * Note that the array type is specified by the declarator. */
VarDec -> ID
    | VarDec LB INT RB  /* arr[1][2] */
FunDec -> ID LP VarList RP  /* swap(int a, int b) */
    | ID LP RP  /* swap() */
VarList -> ParamDec COMMA VarList  /* int a, int b */
    | ParamDec  /* int a */
ParamDec -> Specifier VarDec  /* int a */

/* STATEMENT specifies several program structures, such as branching structure or loop structure.
 * They are mostly enclosed by curly braces, or end with a semicolon. */
CompSt -> LC DefList StmtList RC    /* {...} */
StmtList -> Stmt StmtList
    | $
Stmt -> Exp SEMI    /* ...; */
    | CompSt    /* {...} */
    | RETURN Exp SEMI   /* return ...; */
    | IF LP Exp RP Stmt     /* if(...){...} */
    | IF LP Exp RP Stmt ELSE Stmt   /* if(...){...}else{...} */
    | WHILE LP Exp RP Stmt  /* while(...){...} */

/* LOCAL DEFINITION includes the declaration and assignment of local variables. */
DefList -> Def DefList  /* int a,b=1; char c='e',d; */
    | $
Def -> Specifier DecList SEMI   /* int a,b=1 ; */
DecList -> Dec  /* a */
    | Dec COMMA DecList  /* a , b=1 */
Dec -> VarDec   /* a */
    | VarDec ASSIGN Exp  /* b = 1 */

/* EXPRESSION can be a single constant, or operations on variables.
 * Note that these operators have their precedence and associativity, as shown in Table 2 in phase1-guide.pdf. */
Exp -> Exp ASSIGN Exp
    | Exp AND Exp
    | Exp OR Exp
    | Exp LT Exp
    | Exp LE Exp
    | Exp GT Exp
    | Exp GE Exp
    | Exp NE Exp
    | Exp EQ Exp
    | Exp PLUS Exp
    | Exp MINUS Exp
    | Exp MUL Exp
    | Exp DIV Exp
    | LP Exp RP
    | MINUS Exp
    | NOT Exp
    | ID LP Args RP
    | ID LP RP
    | Exp LB Exp RB
    | Exp DOT ID
    | ID
    | INT
    | FLOAT
    | CHAR
Args -> Exp COMMA Args
    | Exp

/* You can optionally implement your compiler to support comments.
 * There are two types of comment styles for SPL, single-line and multi-line comments:
 * - A single-line comment starts with two slashes "//"
 *   all symbols followed until a newline character will be dropped by the lexer.
 * - A multi-line comment starts with "/*", and ends with the first "*/" after that.
 *   Note that multi-line comments cannot be nested, i.e., you cannot put another multi-line comment within "/*" and "*/".
 */
